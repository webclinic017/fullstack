;(function () {    window.onload = function () {        function Stock_game(id) {            //缓存this            var _this = this;            //获取DOM对象            this.cvs = document.getElementById(id);            this.ctx = this.cvs.getContext('2d');            this.fall_btn = $("#fall_btn");            this.rise_btn = $("#rise_btn");            this.game_tips = $("#game-tips");            this.real_score = $("#real_score");            this.wxlogin = $("#wxlogin");            this.start_game = $("#start");            this.game_box = $("#game_box");            this.btns = $(".btns");            this.loadding = $("#loadding");            this.audio = $("#audio")[0];            this.music_ctrl = $("#music_ctrl");            this.bgm_pause = $("#bgm_pause");            this.end_score = $("#end_score");            this.end_page = $("#end_page");            this.replay = $("#replay");            this.share = $("#share");            this.wxshare_mask = $("#wxshare_mask");            this.get_award = $("#get_award");            this.get_award_now = $("#get_award_now");            this.award_tips = $("#award_tips");            this.real_name = $("#real_name");            this.real_tel = $("#real_tel");            this.award_page = $("#award_page");            // 获取当前画布宽、高 --> 设置canvas的数据宽高;            this.cur_w = parseInt(getStyle(this.cvs, 'width'));            this.cvs.width = this.cur_w;            console.log('当前设备宽度 ->' + this.cur_w);            this.cur_h = parseInt(getStyle(this.cvs, 'height'));            this.cvs.height = this.cur_h;            console.log('当前设备高度 ->' + this.cur_h);            //获取计算后的属性 - 兼容            function getStyle(obj, name) {                if (obj.currentStyle) {                    return obj.currentStyle[name];                } else {                    return getComputedStyle(obj, false)[name];                }            }            //检测微信环境            this.isWeixin = navigator.userAgent.toLowerCase().indexOf('micromessenger') != -1;            //按钮控制            (function (game) {                //为按钮添加激活样式                game.btns.on("touchstart", function (e) {                    e.target.classList.add("active");                });                //为按钮移除激活样式                game.btns.on("touchend", function (e) {                    e.target.classList.remove("active");                });                //控制音乐播放暂停                game.music_ctrl.on("touchend", function (e) {                    game.bgm_pause.toggle();                    if (getStyle(game.bgm_pause[0], "display") == "block") {                        game.audio.pause();                    } else {                        game.audio.play();                    }                });                //触发游戏开始                game.start_game.on("touchend", function () {                    //触发游戏开始                    game.start_game.trigger("start_game");                });                //微信相关                game.wxlogin.on("tap", function () {                    var redirect_uri = encodeURIComponent(window.location.href);                    window.location.href = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx6bbeaa275661873a&redirect_uri="+ redirect_uri +"&response_type=code&scope=snsapi_userinfo&state=#wechat_redirect "                });                //微信 - 分享按钮                game.share.on("touchend", function (e) {                    game.wxshare_mask.css({                        "display": "block",                        "top": 2 * game.cur_h                    })                });                game.wxshare_mask.on("touchend", function (e) {                    game.wxshare_mask.css({                        "display": "none"                    });                });                // 领取奖励相关                game.award_tips.on("touchend", function (e) {                    game.award_tips.css({display: "none"});                });                // 领取奖励按钮                game.get_award.on("touchend", function (e) {                    //定位到游戏页面                    _this.game_box.css({                        top: -_this.cur_h * 3                    });                    //做左右倾斜动画                    game.award_page.css({                        "-webkit-transform": "rotate(45deg)",	/* Safari 和 Chrome */                        "transform":"rotate(45deg)"                    });                    setTimeout(function(){                        game.award_page.css({                            "-webkit-transform":"rotate(0deg)",	/* Safari 和 Chrome */                            "transform":"rotate(0deg)"                        });                    },500);                });                //立即领取奖励按钮                game.get_award_now.on("touchend", function () {                    var input = game.real_name;                    var rName = input.val() ? input.val() : "";                    $(":input").focus(function() {                        if ($(this).hasClass("warning")) {                            $(this).val("");                            $(this).removeClass("warning");                        }                    });                    if (/^[\u4e00-\u9fa5]+$/.test(input.val())) {                        function checkLength(name) {                            var num = 0;                            for (var i = 0; i < name.length; i++) {                                if (/^[\u4e00-\u9fa5]$/.test(name[i])) {                                    num += 2;                                } else {                                    num++;                                }                            }                            return num;                        }                        var username_length = parseInt(checkLength(input.val()));                        if (username_length < 4 || username_length > 16) {                            input.val("姓名应在2到16个字").addClass("warning");                        }                    } else if (!(/^[\u4e00-\u9fa5]+$/.test(input.val()))) {                        input.val("姓名格式不正确").addClass("warning");                    }                    if ((input.val() == "") || (input.val() == "请填写姓名")) {                        input.val(" 请填写真实姓名").addClass("warning");                    }                    var input = game.real_tel;                    var rPhone = input.val() ? input.val() : "";                    var isMobile = /^(13|14|15|17|18)\d{9}$/;                    var isPhone = /^((0\d{2,4})-)?(\d{7,8})(-(\d{2,}))?$/;                    if ((input.val() == "") || (input.val() == "请填写有效的电话号码") || (!isMobile.test(input.val()) && !isPhone.test(input.val()))) {                        input.val(" 请填写有效的电话号码").addClass("warning");                    }                    var input = $('#email');                    var rEmail = input.val() ? input.val() : "";                    if ((input.val() == "") || (input.val() == "请填写有效的Email") || (!/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(input.val()))) {                        input.val(" 请填写有效的Email").addClass("warning");                    }                    if ($(":input").hasClass("warning")) {                        return false;                    } else {                        //请求领取奖励接口                        $.ajax({                            url: "/action/public/wx/game_winner",                            type:"post",                            data: {                                username:game.real_name.val(),                                phone:game.real_tel.val()                            },                            beforeSend: function () {                                game.award_tips.css({display: "block"}).html("领取中...");                            },                            success: function (data) {                                data = JSON.parse(data);                                if(data.is_succ == true){                                    game.award_tips.css({display: "block"}).html("领取成功!");                                } else {                                    game.award_tips.css({display: "block"}).html(data.error_msg + ",点我重新领取!");                                }                            },                            error: function () {                                game.award_tips.css({display: "block"}).html("网络错误,点我重新领取!");                            }                        });                    }                });            }(this));            // 自定义事件 开始游戏            this.start_game.bind("start_game", function () {                if(window.wx_game.is_login){                    //绑定游戏可以开始事件 /因为要等待用户信息拉取成功才能开始                    _this.start_game.bind("game_can_start", function (){                        gaming();                    });                } else {                    gaming();                }                function gaming(){                    //开启音乐                    if (getStyle(_this.bgm_pause[0], "display") == "block") {                        _this.audio.pause();                    } else {                        _this.audio.play();                    }                    //定位到游戏页面                    _this.game_box.css({                        top: -_this.cur_h                    });                    //重置内存数据                    _this.isGameOver = false;                    _this.block.create_interval = 2000;                    _this.block.speed = 1;                    _this.score_sec = 0;                    _this.blocks = [];                    _this.blood = {                        color: _this.block_colors[0],                        amount: 3,                        w: 10,                        h: 10,                        pos_x: 20,                        pos_y: 30                    };                    _this.miss_stu = false;                    console.log("游戏开始...");                    _this.init();                }            });            // 自定义事件 结束游戏            this.game_box.bind("game_over", function () {                //暂停音乐                _this.audio.pause();                console.log("游戏结束...");                //保存游戏分数                $.ajax({                    url:"/action/public/wx/save_result",                    type:"post",                    data:{result_time:_this.score_sec},                    beforeSend:function(){                        _this.game_tips.css({                            display:"block"                        }).html("游戏结束,正在上传成绩");                    },                    success:function(data){                        data = JSON.parse(data);                        console.log(data);                        if(data.is_succ == true){                            //将击败了多少人写入微信分享                            window.wx_game.hit_num = data.hit;                            $(window.document).trigger("hitDone");                            _this.game_tips.css({                                display:"block"                            }).html("成绩已上传!奖品马上到手 ~");                            setTimeout(function(){                                _this.game_tips.css({                                    display:"none"                                }).html("");                                //定位到结束页                                _this.game_box.css({                                    top: -_this.cur_h * 2                                });                                _this.end_page.css({                                    transform: "rotate(360deg)",                                    "-ms-transform": "rotate(360deg)", /* IE 9 */                                    "-moz-transform": "rotate(360deg)", /* Firefox */                                    "-webkit-transform": "rotate(360deg)", /* Safari 和 Chrome */                                    "-o-transform": "rotate(360deg)"    /* Opera */                                });                            },250);                        } else if(data.is_succ == false){                            //绑定登录(跳转到首页)                            _this.game_tips.on("tap",function(){                                //定位到结束页                                _this.game_box.css({                                    top: 0                                });                                //关闭窗口                                _this.game_tips.css({                                    display:"none"                                }).html("");                            });                            if(data.error_msg == "登录超时或者没有登录"){                                _this.game_tips.css({                                    display:"block"                                }).html(data.error_msg+"<br/>本次成绩不记入排名<br/>点我去登录");                            } else {                                _this.game_tips.css({                                    display:"block"                                }).html(data.error_msg+"<br/>本次成绩不记入排名<br/>点我返回首页");                            }                        }                    }                });                //清理创建计时器                clearInterval(_this.create_timer);            });            // 自定义事件 重新开始            this.replay.bind("touchend", function () {                //定位到游戏页面                _this.game_box.css({                    top: -_this.cur_h                });                _this.end_page.css({                    transform: "rotate(-360deg)",                    "-ms-transform": "rotate(-360deg)", /* IE 9 */                    "-moz-transform": "rotate(-360deg)", /* Firefox */                    "-webkit-transform": "rotate(-360deg)", /* Safari 和 Chrome */                    "-o-transform": "rotate(-360deg)"    /* Opera */                });                console.log("游戏将重新开始...");                _this.start_game.trigger("start_game");            });            // 自定义事件 显示loadding            this.loadding.bind("show_loadding", function () {                console.log("loadding...");                _this.loadding.css("display", "block");            });            // 自定义事件 隐藏loadding层            this.loadding.bind("hide_loadding", function () {                console.log("资源加载完成...");                _this.loadding.css("display", "none");            });            //------------------------游戏参数配置--------------------start-------------------------            //图片资源配置单            this.resConfig = [                {name: "fall_bar", path: "/activity/t31_game/game-fall_bar.png", ratio: 170 / 750},                {name: "rise_bar", path: "/activity/t31_game/game-rise_bar.png", ratio: 170 / 750},                {name: "blood1", path: "/activity/t31_game/game-blood1.png", ratio: 308 / 750},                {name: "blood2", path: "/activity/t31_game/game-blood2.png", ratio: 308 / 750},                {name: "blood3", path: "/activity/t31_game/game-blood3.png", ratio: 308 / 750}            ];            //            this.isFirstLoad = true;            //难度更新叠加时间初始值            this.diff_wt = 0;            //难度更新等待时间            this.diff_dt = 2000;            //速度更新叠加时间初始值            this.diff_wt_v = 0;            //速度更新时间            this.diff_dt_v = 650;            // 游戏状态            this.FirstLoaded = false;            this.isGameOver = false;            // 初始化方块的配置单            //var block_pos = this.cur_w / 3;            this.block = {                amount: 1,                w: 80,                h: 25,                pos_x: 350,                pos_y: 1,                start_y: -25,                color: '#ccc',                //方块下落速度初始值                speed: 1,                //方块下落速度最大值                speed_max: 5,                //下落速度增加值 /越大速度递增越快                speed_add: 0.02,                //创建方块间隔时间                create_interval: 2000,                //创建方块最小值                create_interval_min: 500,                //每次创建时间递减值 /越大单位时间创建的方块数越多                create_interval_cut: 100,                //方块宽度区间                w_range: {                    min: 40,                    max: 60                },                //方块x坐标区间                pos_x_range: {                    min: 50,                    interval: 50,                    max: this.cur_w                },                pos_x_arr: []            };            //用于存储产生的方块            this.blocks = [];            //方块的颜色数组            this.block_colors = ['#ff3333', '#61cb28'];            // 判定区间数据            // 在初始化资源时生成            //miss数据            this.miss_stu = false;            this.miss_color = ["#fff", "#ed6e4b"];            //index=0 为miss的tip 其余都是正确tip            this.tips = ["很遗憾~", "nice~", "cool!", "666", "32个赞!", "大人真乃神人","厉害了~"];            this.miss_tip = this.tips[0];            this.right_tip = this.random_tip();            // 分数数据            this.score = 0;            this.score_color = '#f23244';            this.score_posX = this.cur_w - 200;            this.score_posY = 28;            //分数增长值            this.score_curve = 100;            //分数更新叠加时间            this.score_wt = 0;            //分数更新等待时间            this.score_dt = 1000;            this.score_sec = 0;            //生命条数据            this.blood = {                color: this.block_colors[0],                amount: 3,                w: 10,                h: 10,                pos_x: 20,                pos_y: 30            };        }        //------------------------游戏参数配置-------------------end---------------------------------        // 重置Stock_game的原型对象        Stock_game.prototype = {            constructor: Stock_game,            // 初始化游戏方法-主循环-调用方法            init: function () {                var _this = this;                //开启创建方块功能                this.create_blocks();                if (this.FirstLoaded == false) {                    //开启按钮控制                    this.btn_ctrl();                }                //开启键盘控制                //this.key_ctrl();                (function loop() {                    // 更新数据                    _this.updata();                    //渲染画布                    _this.render();                    //开启miss判断                    _this.MainController().judge_miss();                    //开启游戏结束功能                    _this.MainController().gameOverChecker();                    // 原生动画引擎                    var requestAnimationFrame = window.requestAnimationFrame                        || window.mozRequestAnimationFrame                        || window.webkitRequestAnimationFrame                        || window.msRequestAnimationFrame                        || setInterval;                    //如果游戏结束,停止渲染                    if (!_this.isGameOver) {                        requestAnimationFrame(loop)                    }                })();                //DEBUG 重复绑定时间                this.FirstLoaded = true;            },            /**             * 初始化资源             * 资源加载 - 初始化资源尺寸             * @param callback             */            initialRes: function (callback) {                var imgs = {};                var count = 0;                var _this = this;                var res = this.resConfig;                // 每次有图片完成加载之后都执行这个函数，如果所有图片都加载完成则执行callback函数                function loadHandler() {                    count++;                    if (count >= res.length) {                        // 将拿到的图片资源放在游戏对象上                        _this.imgs = imgs;                        //生成配置单                        //初始化方块的间隔                        var block_width = imgs.rise_bar.width;                        var amount = parseInt(_this.cur_w / block_width);                        var interval = _this.cur_w / 15;                        //console.log('方块间隔' + interval);                        //console.log('当前屏幕最多方块数' + amount);                        //动态生成方块位置数组                        for (var i = 0; i < amount; i++) {                            _this.block.pos_x_arr.push(parseInt(interval + block_width * i));                        }                        //初始化判断区间                        var judgeInfo = {judgeTopRatio: 870 / 1333, judgeHeightRatio: 90 / 1333};                        _this.judge_top = parseInt(_this.cur_h * judgeInfo.judgeTopRatio);                        //console.log("判定区间的top"+_this.judge_top);                        _this.judge_bottom = parseInt(_this.cur_h * (judgeInfo.judgeTopRatio + judgeInfo.judgeHeightRatio));                        _this.judge_interval = _this.judge_bottom - _this.judge_top;                        //初始化方块数组 -> 用于产生方块时候使用                        _this.block_colors = [imgs.rise_bar, imgs.fall_bar];                        //更改loading状态                        _this.isLoadding = false;                        _this.loadding.trigger("hide_loadding");                        // 重新设置count                        count = 0;                    }                }                for (var i = 0; i < res.length; i++) {                    _this.isLoadding = true;                    // 遍历资源数组，创建img标签                    var img = new Image();                    //设置图片的宽度                    img.width = res[i].ratio * _this.cur_w;                    img.src = res[i].path;                    img.addEventListener('load', function () {                        loadHandler()                    });                    imgs[res[i].name] = img;                }            },            //请求全屏            launchFullScreen: function (element) {                if (element.requestFullscreen) {                    element.requestFullscreen();                } else if (element.mozRequestFullScreen) {                    element.mozRequestFullScreen();                } else if (element.webkitRequestFullscreen) {                    element.webkitRequestFullscreen();                } else if (element.msRequestFullscreen) {                    element.msRequestFullscreen();                }            },            // 数据更新方法，用于更新实景中的各个事物数据            updata: function () {                this.updata_score();                // 更新每个方块的数据                this.updata_blocks();                // 提升难度                this.updata_difficulty();            },            updata_score: function () {                // 更新分数                this.score_wt += 16.67;                if (this.score_wt >= this.score_dt) {                    this.score_wt -= this.score_dt;                    this.score += this.score_curve;                    this.score_sec += 1;                }            },            // 更新每个方块的数据            updata_blocks: function () {                for (var i = 0; i < this.blocks.length; i++) {                    this.blocks[i].pos_y = this.block.pos_y > 0 ? this.blocks[i].pos_y += this.block.speed : this.blocks[i].pos_y -= 4;                }            },            updata_difficulty: function () {                var _this = this;                //根据时间增加下落速度                this.diff_wt_v += 16.67;                if (this.diff_wt_v >= this.diff_dt_v) {                    this.diff_wt_v -= this.diff_dt_v;                    //增加下落速度                    _this.block.speed = _this.block.speed < _this.block.speed_max ? _this.block.speed += _this.block.speed_add : _this.block.speed;                    console.log("当前速度----" + _this.block.speed)                }                this.diff_wt += 16.67;                if (this.diff_wt >= this.diff_dt) {                    this.diff_wt -= this.diff_dt;                    //减少创建间隔时间                    if (_this.create_timer) {                        //清理创建计时器                        clearInterval(_this.create_timer);                        //更改间隔时间                        _this.block.create_interval = _this.block.create_interval > _this.block.create_interval_min ? _this.block.create_interval -= _this.block.create_interval_cut : _this.block.create_interval;                        console.log('当前创建时间为----' + _this.block.create_interval);                        //重启计时器                        _this.create_blocks();                    }                }            },            //创建方块            create_blocks: function () {                var _this = this;                _this.create_timer = setInterval(function () {                    // 间隔一定时间新创建一个方块                    // 创建方块的颜色                    var index = Math.round(Math.random());                    var block_color = _this.block_colors[index];                    var block = {                        w: _this.block.w,                        h: _this.block.h,                        pos_x: _this.block.pos_x_arr[parseInt(Math.random() * (_this.block.pos_x_arr.length))],                        pos_y: _this.block.start_y,                        color: block_color,                        speed: _this.block.speed,                        judge_st: 0 //0为nothing -1为判断错误 -2为miss 1为正确                    };                    _this.blocks.push(block);                    //console.log(_this.block.create_interval);                    console.log("当前方块数 -> " + _this.blocks.length);                }, _this.block.create_interval)            },            //渲染每个方块            render_blocks: function () {                //遍历blocks数组                for (var i = 0; i < this.blocks.length; i++) {                    //this.ctx.fillStyle = this.blocks[i].color;                    //this.ctx.fillRect(this.blocks[i].pos_x, this.blocks[i].pos_y, this.blocks[i].w, this.blocks[i].h);                    //console.log(this.blocks[i].color.height);                    var block_height = parseInt(this.blocks[i].color.width * (45 / 170));                    this.ctx.drawImage(this.blocks[i].color, this.blocks[i].pos_x, this.blocks[i].pos_y, this.blocks[i].color.width, block_height);                }                //产生一次,清理一次内存                this.clear_RAM("normal");            },            //render_bloods: function () {            //    this.ctx.fillStyle = this.blood.color;            //    for (var i = 0; i < this.blood.amount; i++) {            //        var start_x = this.blood.pos_x + i * (this.blood.w + this.blood.interval);            //        this.ctx.fillRect(start_x, this.blood.pos_y, this.blood.w, this.blood.h);            //    }            //},            //随机取出一个正确提示语            random_tip: function () {                this.right_tip = this.tips[1 + parseInt(Math.random() * (this.tips.length - 1))];            },            render_missTip: function () {                var _this = this;                if (this.miss_stu == true) {                    this.ctx.fillStyle = this.miss_color[0];                    this.ctx.font = '25px square';                    this.ctx.fillText(this.miss_tip, this.cur_w / 2 - 25, this.cur_h / 2);                    setTimeout(function () {                        _this.miss_stu = false;                    }, 120)                } else if (this.miss_stu == "right") {                    this.ctx.fillStyle = this.miss_color[1];                    this.ctx.font = '25px square';                    this.ctx.fillText(this.right_tip, this.cur_w / 2 - (20 * this.right_tip.length / 2 + 1), this.cur_h / 2);                    setTimeout(function () {                        _this.miss_stu = false;                    }, 380)                }            },            render_score: function () {                this.real_score.html(this.score_sec + "''")            },            render_blood: function () {                //根据当前的生命值数 绘制不同的图片                var amount = this.blood.amount;                //console.log(this.imgs);                var bloodImg = null;                if (amount <= 1) {                    bloodImg = this.imgs.blood1;                } else if (amount == 2) {                    bloodImg = this.imgs.blood2;                } else {                    bloodImg = this.imgs.blood3;                }                var blood_height = parseInt(bloodImg.width * (55 / 308));                this.ctx.drawImage(bloodImg, this.blood.pos_x, this.blood.pos_y, bloodImg.width, blood_height);            },            //清理内存            clear_RAM: function (type) {                if (this.blocks.length <= 0) return;                if (type == 'normal') {                    //第一个方块的pos_y超过设定高度的时候,清除掉                    if (this.blocks[0].pos_y >= (this.judge_top + 100)) {                        this.blocks.shift();                    }                } else if (type == 'now') {                    this.blocks.shift();                }            },            // 渲染到画布，用于绘制景物            render: function () {                this.ctx.textBaseline = 'top';                // 清除之前绘制图形                this.ctx.clearRect(0, 0, this.cur_w + 1000, this.cur_h);                // 绘制判定区间                //this.ctx.fillStyle = "#fff";                //this.ctx.fillRect(0, this.judge_top, this.cur_w, this.judge_interval);                //绘制方块                this.render_blocks();                //绘制血槽                this.render_blood();                //绘制miss                this.render_missTip();                //绘制分数                this.render_score();            },            //控制组            MainController: function () {                var _this = this;                function find_block() {                    if (_this.blood.amount <= 0 || _this.blocks.length <= 0) {                        return;                    }                    return 0;                }                function decrease_blood() {                    _this.blood.amount = _this.blood.amount > 0 ? _this.blood.amount - 1 : _this.blood.amount;                    console.log('当前生命值----------' + _this.blood.amount);                    if (_this.blood.amount <= 0) {                        _this.isGameOver = true;                        //触发gameover事件                        _this.game_box.trigger("game_over");                    }                }                function increase_score() {                    _this.score += 150;                }                return {                    /**                     * 判定当前方块的坐标                     * 返回坐标是否在判定区间内的布尔值                     */                    judge_coord: function () {                        if (_this.blood.amount <= 0 || _this.blocks.length <= 0) {                            return;                        }                        var index = find_block();                        var block_height = parseInt(_this.blocks[index].color.width * (45 / 170));                        //按键按下的时候获得当前第一个block的坐标                        var y_coord = _this.blocks[index].pos_y;                        if ((y_coord + block_height >= _this.judge_top) && (y_coord <= _this.judge_bottom)) {                            return true;                        } else {                            return false;                        }                    },                    /**                     * 获取当前的按钮或者按健所对应的值                     * 返回布尔值                     * 涨为1                     * 跌为0                     */                    judge_color: function () {                        if (_this.blood.amount <= 0 || _this.blocks.length <= 0) {                            return;                        }                        var index = find_block();                        var cur_color = _this.blocks[index].color;                        cur_color = cur_color == _this.block_colors[index] ? 1 : 0;                        return cur_color;                    },                    /** 生命条                     * decrease_blood                     */                    decrease_blood: decrease_blood,                    //miss                    /**                     * 判断方块下落时的miss状态                     * 改变方块的judge_st                     */                    judge_miss: function () {                        if (_this.blood.amount <= 0 || _this.blocks.length <= 0) {                            return;                        }                        //var block_height = parseInt(_this.blocks[0].color.width * (45 / 170));                        if (_this.blocks[0].pos_y > _this.judge_bottom) {                            _this.blocks[0].judge_st = -2;                            // 更改miss状态                            _this.miss_stu = true;                            _this.blocks.shift();                            decrease_blood();                        }                    },                    /**                     * 判断按键时候方块下落时的miss状态                     * 改变方块的judge_st                     */                    judge_acMiss: function () {                        if (_this.blood.amount <= 0 || _this.blocks.length <= 0) {                            return;                        }                        if (_this.blocks[0].pos_y < _this.judge_top) {                            _this.blocks[0].judge_st = -2;                            // 更改miss状态                            _this.miss_stu = true;                        }                    },                    //分数                    increase_score: increase_score,                    /**                     * 停止所有的计时器,updata 游戏不再执行                     * 收集游戏数据                     */                    gameOverChecker: function () {                        if (this.isGameOver) {                            //停止所有的计时器,updata                            clearInterval(_this.create_timer);                        }                    }                };            },            //控制页面中按钮的动作            /**             * 涨跌代码在判断颜色函数中会用到             */            btn_ctrl: function () {                var MC = this.MainController();                var _this = this;                this.fall_btn.on('touchstart', function () {                    if (_this.blocks.length < 1) {                        return false;                    }                    //添加激活样式                    var color_flag = MC.judge_color();                    var coord_flag = MC.judge_coord();                    MC.judge_acMiss();                    if (color_flag == 0 && coord_flag) {                        //判断正确                        MC.increase_score();                        _this.random_tip();                        _this.miss_stu = "right";                    } else {                        //减分                        MC.decrease_blood();                    }                });                this.rise_btn.on('touchstart', function () {                    if (_this.blocks.length < 1) {                        return false;                    }                    color_flag = MC.judge_color();                    coord_flag = MC.judge_coord();                    MC.judge_acMiss();                    if (color_flag == 1 && coord_flag) {                        //判断正确                        MC.increase_score();                        _this.random_tip();                        _this.miss_stu = "right";                    } else {                        MC.decrease_blood();                    }                });                this.fall_btn.on('touchend', function () {                    //判断完成,清除第一个方块                    _this.clear_RAM('now');                });                this.rise_btn.on('touchend', function () {                    //移除按键样式                    _this.rise_btn.removeClass("active");                    //判断完成,清除第一个方块                    _this.clear_RAM('now');                });            },            //键盘控制            key_ctrl: function () {                var MC = this.MainController();                var _this = this;                document.onkeydown = function (e) {                    if (e.keyCode == 37) { //跌                        //添加激活样式                        _this.fall_btn.classList.add("active");                        MC.judge_acMiss();                        var color_flag = MC.judge_color();                        var coord_flag = MC.judge_coord();                        if (color_flag == 0 && coord_flag) {                            //判断正确                            //alert('判断正确 颜色为绿色');                            MC.increase_score();                        } else {                            //alert('判断错误');                            //减分                            MC.decrease_blood();                        }                    }                    else if (e.keyCode == 39) {                        MC.judge_acMiss();                        //添加激活样式                        _this.rise_btn.classList.add("active");                        color_flag = MC.judge_color();                        coord_flag = MC.judge_coord();                        if (color_flag == 1 && coord_flag) {                            //判断正确                            //alert('判断正确 颜色为红色');                            MC.increase_score();                        } else {                            //alert('判断错误');                            MC.decrease_blood();                        }                    }                };                document.onkeyup = function (e) {                    if (e.keyCode == 37 || e.keyCode == 39) {                        //移除按键样式                        _this.fall_btn.classList.remove("active");                        _this.rise_btn.classList.remove("active");                        //判断完成,清除第一个方块                        _this.clear_RAM('now');                    }                }            }        };        //游戏实例化 /传入画布id        var stock_game = new Stock_game('cvs');        //预加载资源 /不用使用loading        stock_game.initialRes();    };}());